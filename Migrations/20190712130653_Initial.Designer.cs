// <auto-generated />
using System;
using EditorApp.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EditorApp.API.Migrations
{
    [DbContext(typeof(ReporterContext))]
    [Migration("20190712130653_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EditorApp.API.Models.AcAccident", b =>
                {
                    b.Property<int>("AccidentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccidentSummary")
                        .HasMaxLength(500);

                    b.Property<int?>("AreaId");

                    b.Property<int?>("CausedDriverAge");

                    b.Property<int?>("CausedRegistration");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateofAccident")
                        .HasColumnType("date");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("HighwayCode")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TypeofRoad")
                        .HasMaxLength(50);

                    b.Property<int?>("VehichleCausedFit");

                    b.Property<int?>("VehichleCausedInsuranced");

                    b.Property<int?>("VehichleCausedLicensed");

                    b.Property<int?>("VehichleCausingId");

                    b.Property<int?>("VehichleVictimFit");

                    b.Property<int?>("VehichleVictimId");

                    b.Property<int?>("VehichleVictimInsuranced");

                    b.Property<int?>("VehichleVictimLicensed");

                    b.Property<int?>("VictimDriverAge");

                    b.Property<int?>("VictimRegistration");

                    b.HasKey("AccidentId");

                    b.ToTable("AC_Accident");
                });

            modelBuilder.Entity("EditorApp.API.Models.AcAccidentDetail", b =>
                {
                    b.Property<int>("AccidentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccidentId");

                    b.Property<int?>("AccidentTypeId");

                    b.HasKey("AccidentDetailId");

                    b.HasIndex("AccidentId", "AccidentTypeId")
                        .IsUnique()
                        .HasName("IX_AC_AccidentDetail")
                        .HasFilter("[AccidentId] IS NOT NULL AND [AccidentTypeId] IS NOT NULL");

                    b.ToTable("AC_AccidentDetail");
                });

            modelBuilder.Entity("EditorApp.API.Models.AcAccidentType", b =>
                {
                    b.Property<int>("AccidentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccidentTypeName")
                        .HasMaxLength(500);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AccidentTypeId");

                    b.ToTable("AC_AccidentType");
                });

            modelBuilder.Entity("EditorApp.API.Models.AcAccidentVictim", b =>
                {
                    b.Property<int>("AccidentVictimId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccidentId");

                    b.Property<int?>("Age");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InjuredorKilled")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<int?>("VictimDistrictId");

                    b.HasKey("AccidentVictimId");

                    b.ToTable("AC_AccidentVictim");
                });

            modelBuilder.Entity("EditorApp.API.Models.AcVehichleType", b =>
                {
                    b.Property<int>("VehichleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VehichleCategory")
                        .HasMaxLength(50);

                    b.Property<string>("VehichleTypeName")
                        .HasMaxLength(50);

                    b.HasKey("VehichleTypeId");

                    b.ToTable("AC_VehichleType");
                });

            modelBuilder.Entity("EditorApp.API.Models.ActivityDetail", b =>
                {
                    b.Property<decimal>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityDescription")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Heading")
                        .HasMaxLength(500);

                    b.Property<int?>("UserId");

                    b.HasKey("ActivityId");

                    b.ToTable("ActivityDetail");
                });

            modelBuilder.Entity("EditorApp.API.Models.Anientry", b =>
                {
                    b.Property<int>("AniNewsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Createdby");

                    b.Property<string>("FileName")
                        .HasMaxLength(500);

                    b.Property<string>("NewsName")
                        .HasMaxLength(500);

                    b.HasKey("AniNewsId")
                        .HasName("PK_ANI_NewsEntry");

                    b.ToTable("ANIEntry");
                });

            modelBuilder.Entity("EditorApp.API.Models.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName")
                        .HasMaxLength(50);

                    b.Property<string>("EmailCc")
                        .HasColumnName("EmailCC")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("MobileCc")
                        .HasColumnName("MobileCC")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("AreaId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("EditorApp.API.Models.AreaPermission", b =>
                {
                    b.Property<int>("AreaPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaId");

                    b.Property<int?>("UserId");

                    b.HasKey("AreaPermissionId");

                    b.ToTable("AreaPermission");
                });

            modelBuilder.Entity("EditorApp.API.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssgingmentSubject")
                        .HasMaxLength(550);

                    b.Property<int?>("AssignedBy");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("AssignedTo");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("date");

                    b.Property<int?>("AssignmentDay");

                    b.Property<string>("AssignmentOrganization")
                        .HasMaxLength(550);

                    b.Property<string>("AssignmentPersonality")
                        .HasMaxLength(550);

                    b.Property<string>("AssignmentPlace")
                        .HasMaxLength(550);

                    b.Property<int?>("AssignmentStatus");

                    b.Property<int?>("AssignmentTypeId");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EndTime")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Followup");

                    b.Property<bool?>("IsPhotographerAssigned");

                    b.Property<int?>("OnLeave");

                    b.Property<string>("PictureNeed")
                        .HasMaxLength(50);

                    b.Property<string>("SpecialNote")
                        .HasMaxLength(1500);

                    b.Property<string>("StartTime")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UpdateBy");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignmentDate")
                        .HasName("AssignmentDateIndex");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("EditorApp.API.Models.AssignmentDetail", b =>
                {
                    b.Property<int>("AssignmenDetailtId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignmentId");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PlaceofReply")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("RepliedBy");

                    b.Property<string>("ReplyMessage")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ReplyTime")
                        .HasColumnType("datetime");

                    b.HasKey("AssignmenDetailtId");

                    b.ToTable("AssignmentDetail");
                });

            modelBuilder.Entity("EditorApp.API.Models.AssignmentPhotographer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedById");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("AssignedPgid")
                        .HasColumnName("AssignedPGId");

                    b.Property<int>("AssignmentId");

                    b.HasKey("Id");

                    b.ToTable("AssignmentPhotographer");
                });

            modelBuilder.Entity("EditorApp.API.Models.AssignmentType", b =>
                {
                    b.Property<int>("AssignmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignmentTypeName")
                        .HasMaxLength(50);

                    b.HasKey("AssignmentTypeId");

                    b.ToTable("AssignmentType");
                });

            modelBuilder.Entity("EditorApp.API.Models.CsCaseSummary", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArrestedPerson")
                        .HasMaxLength(150);

                    b.Property<string>("CaseClosedViaMedia")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CaseDate")
                        .HasColumnType("date");

                    b.Property<string>("CaseDetails")
                        .HasMaxLength(250);

                    b.Property<int>("CaseDistrictId");

                    b.Property<string>("CaseFiledAgainstAddress")
                        .HasMaxLength(500);

                    b.Property<string>("CaseFiledAgainstAge")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CaseFiledAgainstName")
                        .HasMaxLength(150);

                    b.Property<int>("CaseFiledAgainstOccupation");

                    b.Property<string>("CaseFiledAgainstPoliticalIdentity")
                        .HasMaxLength(150);

                    b.Property<string>("CaseFiledAgainstType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CaseFiledByDesignation")
                        .HasMaxLength(100);

                    b.Property<string>("CaseFiledByName")
                        .HasMaxLength(150);

                    b.Property<string>("CaseFiledType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CaseSection")
                        .HasMaxLength(250);

                    b.Property<string>("CaseThanaName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ChargeSheetDate")
                        .HasColumnType("date");

                    b.Property<string>("ChargeSheetPerson")
                        .HasMaxLength(150);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.HasKey("CaseId");

                    b.ToTable("CS_CaseSummary");
                });

            modelBuilder.Entity("EditorApp.API.Models.Dcsms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MobileNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SmssendTime")
                        .HasColumnName("SMSSendTime")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Smstext")
                        .HasColumnName("SMSText")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DCSMS");
                });

            modelBuilder.Entity("EditorApp.API.Models.Dctask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedBy");

                    b.Property<DateTime?>("AssignedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("AssignedTo");

                    b.Property<string>("TaskDetail")
                        .HasMaxLength(3500);

                    b.Property<int?>("TaskStatus");

                    b.Property<string>("TaskSubject")
                        .HasMaxLength(250);

                    b.HasKey("TaskId");

                    b.ToTable("DCTask");
                });

            modelBuilder.Entity("EditorApp.API.Models.DctaskSdetail", b =>
                {
                    b.Property<int>("TaskDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RepliedBy");

                    b.Property<int?>("ReplyStatus");

                    b.Property<string>("ReplyText")
                        .HasMaxLength(1500);

                    b.Property<DateTime?>("ReplyTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaskId");

                    b.HasKey("TaskDetailId")
                        .HasName("PK_DCTaskDetail");

                    b.ToTable("DCTaskSDetail");
                });

            modelBuilder.Entity("EditorApp.API.Models.DeletedUser", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .HasMaxLength(500);

                    b.Property<string>("MobileNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserGroup")
                        .HasMaxLength(500);

                    b.Property<int?>("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AutoId");

                    b.ToTable("DeletedUser");
                });

            modelBuilder.Entity("EditorApp.API.Models.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesignationName")
                        .HasMaxLength(150);

                    b.HasKey("DesignationId");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("EditorApp.API.Models.DeskPermission", b =>
                {
                    b.Property<int>("DeskPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeskCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UserId");

                    b.HasKey("DeskPermissionId");

                    b.ToTable("DeskPermission");
                });

            modelBuilder.Entity("EditorApp.API.Models.DigiSecurityActAccused", b =>
                {
                    b.Property<int>("DigiSecurityAccusedId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DigiSecurityAccusedAge")
                        .HasMaxLength(50);

                    b.Property<string>("DigiSecurityAccusedName");

                    b.Property<string>("DigiSecurityAccusedOccupation");

                    b.Property<int?>("DigitalSecurityActCaseId");

                    b.HasKey("DigiSecurityAccusedId");

                    b.ToTable("DigiSecurityActAccused");
                });

            modelBuilder.Entity("EditorApp.API.Models.DigiSecurityActVictim", b =>
                {
                    b.Property<int>("DigiSecurityVictimId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DigiSecurityVictimAge")
                        .HasMaxLength(50);

                    b.Property<string>("DigiSecurityVictimName");

                    b.Property<string>("DigiSecurityVictimOccupation");

                    b.Property<int?>("DigitalSecurityActCaseId");

                    b.HasKey("DigiSecurityVictimId");

                    b.ToTable("DigiSecurityActVictim");
                });

            modelBuilder.Entity("EditorApp.API.Models.DigiSecurityActWitness", b =>
                {
                    b.Property<int>("DigiSecurityWitnessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DigiSecurityWitnessAge")
                        .HasMaxLength(50);

                    b.Property<string>("DigiSecurityWitnessName");

                    b.Property<string>("DigiSecurityWitnessOccupation");

                    b.Property<int?>("DigitalSecurityActCaseId");

                    b.HasKey("DigiSecurityWitnessId");

                    b.ToTable("DigiSecurityActWitness");
                });

            modelBuilder.Entity("EditorApp.API.Models.DigitalSecurityActCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseState");

                    b.Property<string>("Cmnt");

                    b.Property<string>("CommentFir")
                        .HasColumnName("CommentFIR");

                    b.Property<string>("Contacts");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DigitalCaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DigitalCaseNo");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("EditedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Evidence");

                    b.Property<string>("Incident");

                    b.Property<string>("Informant");

                    b.Property<string>("Io")
                        .HasColumnName("IO");

                    b.Property<string>("Oc")
                        .HasColumnName("OC");

                    b.Property<string>("Quotes");

                    b.Property<string>("Ro")
                        .HasColumnName("RO");

                    b.Property<string>("Section");

                    b.Property<string>("SerialNo")
                        .HasMaxLength(50);

                    b.Property<int?>("ThanaId");

                    b.HasKey("Id");

                    b.ToTable("DigitalSecurityActCase");
                });

            modelBuilder.Entity("EditorApp.API.Models.District", b =>
                {
                    b.Property<int>("DistrictNameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistrictName")
                        .HasMaxLength(150);

                    b.HasKey("DistrictNameId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwEdition", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EditionCode");

                    b.Property<string>("EditionName")
                        .HasMaxLength(50);

                    b.HasKey("AutoId");

                    b.ToTable("DW_Edition");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwEmployee", b =>
                {
                    b.Property<string>("Employeecode")
                        .HasColumnName("employeecode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Deskcode")
                        .HasColumnName("deskcode");

                    b.Property<string>("Displayname")
                        .HasColumnName("displayname")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("Groupcode")
                        .HasColumnName("groupcode");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ldapint")
                        .HasColumnName("ldapint")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Publicationcode")
                        .HasColumnName("publicationcode");

                    b.Property<string>("Reportingdesk")
                        .HasColumnName("reportingdesk")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Employeecode");

                    b.ToTable("DW_Employee");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwGuestAuthorStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("AuthorDeskCode");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Desk")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("DeskCode");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Flag")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Heading")
                        .HasMaxLength(500);

                    b.Property<string>("Publication")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PublicationCode");

                    b.Property<DateTime?>("StoryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Storycode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Version");

                    b.HasKey("Id");

                    b.ToTable("DW_GuestAuthorStory");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwLastStoryPagewise", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EditionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PageNo");

                    b.Property<string>("StoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StoryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StoryTime")
                        .HasColumnType("datetime");

                    b.HasKey("AutoId");

                    b.ToTable("DW_LastStoryPagewise");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwLastStoryVersion", b =>
                {
                    b.Property<long>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastHeading")
                        .HasMaxLength(4000);

                    b.Property<int>("LastVersion");

                    b.Property<string>("StoryCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AutoId")
                        .HasName("PK_DW_LastStoryVersion_1");

                    b.ToTable("DW_LastStoryVersion");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwLogTime", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("date");

                    b.Property<int?>("NoofMin");

                    b.HasKey("AutoId");

                    b.ToTable("DW_LogTime");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwOnlineContribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contributor")
                        .HasMaxLength(200);

                    b.Property<string>("DeskFrom")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FromDesk");

                    b.Property<int?>("FromPublication");

                    b.Property<string>("Heading")
                        .HasMaxLength(500);

                    b.Property<string>("NewStoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ToDesk");

                    b.Property<int?>("ToPublication");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransferedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DW_OnlineContribution");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwPageWiseStory", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EditionCode");

                    b.Property<string>("FlowStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PageNo");

                    b.Property<string>("StoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StoryDate")
                        .HasColumnType("date");

                    b.Property<int?>("VersionCode");

                    b.HasKey("AutoId");

                    b.ToTable("DW_PageWiseStory");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwPhotoReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeskCode");

                    b.Property<string>("Employeecode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("PhotoDate")
                        .HasColumnType("date");

                    b.Property<int?>("Published");

                    b.Property<int?>("Uploaded");

                    b.HasKey("Id");

                    b.ToTable("DW_PhotoReport");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwStorySummaryBreakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Approved");

                    b.Property<int?>("Assignment");

                    b.Property<int?>("AvgWordsPerDay");

                    b.Property<int?>("Compiled");

                    b.Property<int?>("DaysWorked");

                    b.Property<string>("Displayname")
                        .HasMaxLength(250);

                    b.Property<int?>("Edited");

                    b.Property<string>("Employeecode")
                        .HasColumnName("employeecode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Interview");

                    b.Property<string>("Remark")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("Report");

                    b.Property<int?>("Selfwritten");

                    b.Property<DateTime?>("StoryDate")
                        .HasColumnType("date");

                    b.Property<int?>("TotalStories");

                    b.Property<int?>("TotalWords");

                    b.Property<int?>("Translated");

                    b.HasKey("Id");

                    b.ToTable("DW_Story_Summary_Breakdown");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwStoryTye", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Deskcode")
                        .HasColumnName("deskcode");

                    b.Property<string>("Employeecode")
                        .HasColumnName("employeecode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Storycode")
                        .IsRequired()
                        .HasColumnName("storycode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Storydate")
                        .HasColumnName("storydate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DW_StoryTye");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwUserWiseStory", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("StoryCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StoryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Version");

                    b.HasKey("AutoId")
                        .HasName("PK_DW_UserWiseStory_1");

                    b.ToTable("DW_UserWiseStory");
                });

            modelBuilder.Entity("EditorApp.API.Models.DwVersionWordCount", b =>
                {
                    b.Property<string>("StoryCode")
                        .HasMaxLength(50);

                    b.Property<int>("Version");

                    b.Property<string>("Author")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Deskcode");

                    b.Property<string>("Owner")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublicationCode");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Storydate")
                        .HasColumnType("datetime");

                    b.Property<int?>("WordCount");

                    b.Property<int>("WordCountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("StoryCode", "Version");

                    b.ToTable("DW_VersionWordCount");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElArea", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName")
                        .HasMaxLength(250);

                    b.Property<int?>("DistrictId");

                    b.Property<int?>("IsThana");

                    b.Property<int?>("IsUnion");

                    b.Property<int?>("IsUpazila");

                    b.HasKey("AreaId");

                    b.ToTable("EL_Area");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElAreaAssignment", b =>
                {
                    b.Property<int>("AreaAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId");

                    b.HasKey("AreaAssignmentId");

                    b.ToTable("EL_AreaAssignment");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElAsset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DependentAsset")
                        .HasMaxLength(50);

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.Property<string>("SelfAsset")
                        .HasMaxLength(50);

                    b.HasKey("AssetId");

                    b.ToTable("EL_Asset");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElCase", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrentCase");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PreviousCase")
                        .HasMaxLength(10);

                    b.HasKey("CaseId");

                    b.ToTable("EL_Case");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElCentralPolitician", b =>
                {
                    b.Property<int>("CentralPoliticianId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrentDesignation")
                        .HasMaxLength(500);

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.HasKey("CentralPoliticianId");

                    b.ToTable("El_CentralPolitician");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElDistrict", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistrictName")
                        .HasMaxLength(50);

                    b.Property<string>("DistrictNameEn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("DivisionId");

                    b.HasKey("DistrictId");

                    b.ToTable("EL_District");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElDivision", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DivisionName")
                        .HasMaxLength(50);

                    b.HasKey("DivisionId");

                    b.ToTable("EL_Division");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElEducation", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EducationTypeId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("PersonId");

                    b.HasKey("EducationId");

                    b.ToTable("EL_Education");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElEducationType", b =>
                {
                    b.Property<int>("EducationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EducationTypeName")
                        .HasMaxLength(50);

                    b.HasKey("EducationTypeId");

                    b.ToTable("EL_EducationType");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElElection", b =>
                {
                    b.Property<int>("ElectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(500);

                    b.Property<string>("ElectionName")
                        .HasMaxLength(150);

                    b.Property<int?>("ElectionYear");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("date");

                    b.Property<int?>("MajorityPartyId");

                    b.Property<int?>("OppositionPartyId");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("ElectionId");

                    b.ToTable("EL_Election");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElElectionArea", b =>
                {
                    b.Property<int>("ElectionAreaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ElectionAreaName")
                        .HasMaxLength(50);

                    b.Property<int?>("ElectionAreaSerial");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegularorReserved")
                        .HasMaxLength(50);

                    b.HasKey("ElectionAreaId");

                    b.HasIndex("ElectionAreaName")
                        .IsUnique()
                        .HasName("IX_EL_ElectionArea")
                        .HasFilter("[ElectionAreaName] IS NOT NULL");

                    b.HasIndex("ElectionAreaSerial", "ElectionId")
                        .IsUnique()
                        .HasName("IX_EL_ElectionArea_1")
                        .HasFilter("[ElectionAreaSerial] IS NOT NULL AND [ElectionId] IS NOT NULL");

                    b.ToTable("EL_ElectionArea");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElElectionAreaDetail", b =>
                {
                    b.Property<int>("ElectionAreaDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ElectionAreaDetailId");

                    b.ToTable("EL_ElectionAreaDetail");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElElectionAreaHistory", b =>
                {
                    b.Property<int>("ElectionAreaHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("IsUncompetitionally");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PoliticalPartyId");

                    b.Property<int?>("Position");

                    b.Property<string>("TotalVote")
                        .HasMaxLength(10);

                    b.HasKey("ElectionAreaHistoryId");

                    b.ToTable("EL_ElectionAreaHistory");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElFamilyPolitician", b =>
                {
                    b.Property<int>("FamilyPloiticianId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrentDesignation")
                        .HasMaxLength(500);

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<string>("FamilyPoliticianName")
                        .HasMaxLength(500);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.Property<int?>("PoliticalPartyId");

                    b.Property<string>("PoliticsEntryYear")
                        .HasMaxLength(50);

                    b.HasKey("FamilyPloiticianId");

                    b.ToTable("EL_FamilyPolitician");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElIncidentDetail", b =>
                {
                    b.Property<int>("CurrentMpId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("Detail")
                        .HasMaxLength(50);

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<string>("IncidentType")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.HasKey("CurrentMpId");

                    b.ToTable("EL_IncidentDetail");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElIncome", b =>
                {
                    b.Property<int>("IncomeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DependentIncome")
                        .HasMaxLength(50);

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.Property<string>("SelfIncome")
                        .HasMaxLength(50);

                    b.HasKey("IncomeId");

                    b.ToTable("EL_Income");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElInternalClash", b =>
                {
                    b.Property<int>("InternalClashId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClashDescription")
                        .HasMaxLength(500);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<string>("Injured")
                        .HasMaxLength(50);

                    b.Property<string>("Killed")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PoliticalPartyId");

                    b.Property<string>("SelfClash")
                        .HasMaxLength(50);

                    b.HasKey("InternalClashId");

                    b.ToTable("EL_InternalClash");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElLiability", b =>
                {
                    b.Property<int>("LiabilityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.Property<string>("SelfLiability")
                        .HasMaxLength(50);

                    b.HasKey("LiabilityId");

                    b.ToTable("EL_Liability");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElMinorityAttack", b =>
                {
                    b.Property<int>("MinorityAttackId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.HasKey("MinorityAttackId")
                        .HasName("PK_EL_MinorityAttach");

                    b.ToTable("EL_MinorityAttack");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElMinorityVoterCount", b =>
                {
                    b.Property<int>("MinorityVoterCountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuddhaVoter");

                    b.Property<int?>("ChristianVoter");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("HinduVoter");

                    b.Property<int?>("LastUpdatedYear");

                    b.Property<int?>("TribalVoter");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("MinorityVoterCountId");

                    b.ToTable("EL_MinorityVoterCount");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElNomination", b =>
                {
                    b.Property<int>("NominationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PoliticalPartyId");

                    b.HasKey("NominationId");

                    b.ToTable("EL_Nomination");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElOccupation", b =>
                {
                    b.Property<int>("OccupationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("OccupationTypeId");

                    b.Property<int?>("PersonId");

                    b.HasKey("OccupationId");

                    b.ToTable("EL_Occupation");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElOccupationType", b =>
                {
                    b.Property<int>("OccupationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OccupationTypeName")
                        .HasMaxLength(50);

                    b.Property<string>("OccupationTypeNameEn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("OccupationTypeId");

                    b.ToTable("EL_OccupationType");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElOnJamanotBajeapto", b =>
                {
                    b.Property<int>("JamanotBajeaptoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PoliticalPartyId");

                    b.Property<int?>("TotalVote");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("JamanotBajeaptoId");

                    b.ToTable("EL_OnJamanotBajeapto");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElOnResult", b =>
                {
                    b.Property<int>("VoteResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<string>("ElectionSymbol")
                        .HasMaxLength(150);

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PoliticalPartyId");

                    b.Property<int?>("SerialNo");

                    b.Property<int?>("TotalVote");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("WithoutCompetition");

                    b.HasKey("VoteResultId");

                    b.ToTable("EL_OnResult");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElOnResultUponirbachon", b =>
                {
                    b.Property<int>("UponirbachonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PoliticalPartyId");

                    b.Property<int?>("SerialNo");

                    b.Property<int?>("TotalVote");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("WithoutCompetition");

                    b.HasKey("UponirbachonId");

                    b.ToTable("EL_OnResultUponirbachon");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElOnVoterInfo", b =>
                {
                    b.Property<int>("VoterInfoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("NoVote");

                    b.Property<int?>("NonValidVote");

                    b.Property<int?>("TotalCenter");

                    b.Property<int?>("TotalVoter");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ValidVote");

                    b.HasKey("VoterInfoId");

                    b.ToTable("EL_OnVoterInfo");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElOneEleven", b =>
                {
                    b.Property<int>("OneElevenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<string>("Influence")
                        .HasMaxLength(50);

                    b.Property<string>("IsKnown")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.HasKey("OneElevenId");

                    b.ToTable("EL_OneEleven");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElPerson", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrentDistrictId");

                    b.Property<string>("FatherName")
                        .HasMaxLength(500);

                    b.Property<string>("MotherName")
                        .HasMaxLength(500);

                    b.Property<int?>("PermanentDistrictId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(250);

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(250);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("PersonId");

                    b.HasIndex("PersonName")
                        .IsUnique()
                        .HasName("IX_EL_Person")
                        .HasFilter("[PersonName] IS NOT NULL");

                    b.ToTable("EL_Person");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElPersonCase", b =>
                {
                    b.Property<int>("PersonCaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrentCaseFrom2014");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.Property<int?>("PreviousCases");

                    b.HasKey("PersonCaseId");

                    b.ToTable("EL_PersonCase");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElPersonPartyHistory", b =>
                {
                    b.Property<int>("PersonPartyHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CentralPost")
                        .HasMaxLength(500);

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("FromYear");

                    b.Property<int?>("IsCurrent");

                    b.Property<string>("LocalPost")
                        .HasMaxLength(500);

                    b.Property<int?>("PersonId");

                    b.Property<int?>("ToYear");

                    b.HasKey("PersonPartyHistoryId");

                    b.ToTable("EL_PersonPartyHistory");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElPoliticalParty", b =>
                {
                    b.Property<int>("PoliticalPartyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ElectionLogo")
                        .HasMaxLength(150);

                    b.Property<int?>("EstablishedYear");

                    b.Property<string>("PoliticalPartyName")
                        .HasMaxLength(150);

                    b.HasKey("PoliticalPartyId");

                    b.ToTable("EL_PoliticalParty");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElProbableNomination", b =>
                {
                    b.Property<int>("ProbableNominationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Age")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ChangeHistory");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Designation")
                        .HasMaxLength(500);

                    b.Property<int?>("EducationTypeId");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OccupationTypeId");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.Property<int?>("PoliticalPartyId");

                    b.HasKey("ProbableNominationId");

                    b.ToTable("EL_ProbableNomination");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElSpecialCase", b =>
                {
                    b.Property<int>("SpecialCaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Case2014")
                        .HasMaxLength(50);

                    b.Property<string>("Case2015")
                        .HasMaxLength(50);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SpecialAccused")
                        .HasMaxLength(50);

                    b.Property<string>("Thana")
                        .HasMaxLength(500);

                    b.Property<string>("TotalAccused")
                        .HasMaxLength(50);

                    b.HasKey("SpecialCaseId");

                    b.ToTable("EL_SpecialCase");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElSuspension", b =>
                {
                    b.Property<int>("SuspendId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("ElectionId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PersonName")
                        .HasMaxLength(500);

                    b.Property<string>("ReturnYear")
                        .HasMaxLength(50);

                    b.Property<string>("SuspendReason")
                        .HasMaxLength(50);

                    b.Property<string>("SuspendYear")
                        .HasMaxLength(50);

                    b.HasKey("SuspendId");

                    b.ToTable("EL_Suspension");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElTempPerson", b =>
                {
                    b.Property<int>("TempPersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TempPersonName")
                        .HasMaxLength(500);

                    b.HasKey("TempPersonId");

                    b.ToTable("EL_TempPerson");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElUpload", b =>
                {
                    b.Property<int>("UploadId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<string>("FileName")
                        .HasMaxLength(250);

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.HasKey("UploadId");

                    b.ToTable("EL_Upload");
                });

            modelBuilder.Entity("EditorApp.API.Models.ElVoterCount", b =>
                {
                    b.Property<int>("VoterCountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElectionAreaId");

                    b.Property<int?>("FemaleVoter");

                    b.Property<int?>("LastUpdatedYear");

                    b.Property<int?>("MaleVoter");

                    b.Property<int?>("TotalVoter");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("VoterCountId");

                    b.ToTable("EL_VoterCount");
                });

            modelBuilder.Entity("EditorApp.API.Models.EmailCc", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailId")
                        .HasColumnName("EmailID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.HasKey("AutoId");

                    b.ToTable("EmailCC");
                });

            modelBuilder.Entity("EditorApp.API.Models.EmailLog", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmailSendBy");

                    b.Property<string>("EmailText");

                    b.Property<int?>("EmailTo");

                    b.Property<DateTime?>("EntryTime")
                        .HasColumnType("datetime");

                    b.HasKey("EmailId");

                    b.ToTable("EmailLog");
                });

            modelBuilder.Entity("EditorApp.API.Models.EmailQue", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAttachment")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("EmailBody")
                        .HasMaxLength(500);

                    b.Property<string>("EmailCc")
                        .HasColumnName("EmailCC")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("EmailReceipient")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(500);

                    b.Property<string>("EmailTitle")
                        .HasMaxLength(500);

                    b.Property<string>("EmailType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ProcessedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status");

                    b.HasKey("EmailId");

                    b.ToTable("EmailQue");
                });

            modelBuilder.Entity("EditorApp.API.Models.EmployeeWork", b =>
                {
                    b.Property<int>("Userid")
                        .HasColumnName("userid");

                    b.Property<DateTime>("Entrydate")
                        .HasColumnName("entrydate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Approved")
                        .HasColumnName("approved");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasMaxLength(250);

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnName("day")
                        .HasMaxLength(50);

                    b.Property<int?>("Edit")
                        .HasColumnName("edit");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Selfwritten")
                        .HasColumnName("selfwritten");

                    b.Property<int?>("Translation")
                        .HasColumnName("translation");

                    b.Property<int?>("Words")
                        .HasColumnName("words");

                    b.HasKey("Userid", "Entrydate");

                    b.ToTable("EmployeeWork");
                });

            modelBuilder.Entity("EditorApp.API.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EntryBy");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventBar")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("date");

                    b.Property<int?>("EventDay");

                    b.Property<string>("EventDescription")
                        .HasMaxLength(500);

                    b.Property<int?>("EventMonth");

                    b.Property<int?>("EventYear");

                    b.Property<int?>("UpdateBy");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("EventId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EditorApp.API.Models.GroupPermission", b =>
                {
                    b.Property<int>("GroupPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId");

                    b.Property<int?>("UserId");

                    b.HasKey("GroupPermissionId");

                    b.ToTable("GroupPermission");
                });

            modelBuilder.Entity("EditorApp.API.Models.MamsIdData", b =>
                {
                    b.Property<int>("MamsId");

                    b.Property<int?>("Idno")
                        .HasColumnName("IDNo");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.HasKey("MamsId");

                    b.ToTable("MamsIdData");
                });

            modelBuilder.Entity("EditorApp.API.Models.Ncenter", b =>
                {
                    b.Property<int>("CenterCode");

                    b.Property<string>("CenterName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CenterCode")
                        .HasName("PK_Center");

                    b.ToTable("NCenter");
                });

            modelBuilder.Entity("EditorApp.API.Models.NewswrapDesk", b =>
                {
                    b.Property<int>("DeskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeskID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeskCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DeskName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("DeskId");

                    b.ToTable("NewswrapDesk");
                });

            modelBuilder.Entity("EditorApp.API.Models.PhotoAll", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CenterCode");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PhotoDate")
                        .HasColumnType("date");

                    b.Property<string>("PhotoDesk")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhotoName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(550)
                        .IsUnicode(false);

                    b.Property<string>("PhotoSize")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UsedStatus");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PhotoDate", "UserId", "PhotoName")
                        .IsUnique()
                        .HasName("IX_PhotoAll")
                        .HasFilter("[PhotoDate] IS NOT NULL AND [UserId] IS NOT NULL AND [PhotoName] IS NOT NULL");

                    b.ToTable("PhotoAll");
                });

            modelBuilder.Entity("EditorApp.API.Models.PhotoSelection", b =>
                {
                    b.Property<int>("Photoid")
                        .HasColumnName("photoid");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Selection")
                        .HasColumnName("selection");

                    b.HasKey("Photoid");

                    b.ToTable("PhotoSelection");
                });

            modelBuilder.Entity("EditorApp.API.Models.PhotoSummary", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CenterCode");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PhotoDate")
                        .HasColumnType("date");

                    b.Property<string>("PhotoDesk")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhotoName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(550)
                        .IsUnicode(false);

                    b.Property<string>("PhotoSize")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UsedStatus");

                    b.Property<string>("UserCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PhotoDate")
                        .HasName("PhotodateIndex");

                    b.HasIndex("PhotoDate", "UserId", "PhotoName")
                        .IsUnique()
                        .HasName("IX_PhotoSummary")
                        .HasFilter("[PhotoDate] IS NOT NULL AND [UserId] IS NOT NULL AND [PhotoName] IS NOT NULL");

                    b.ToTable("PhotoSummary");
                });

            modelBuilder.Entity("EditorApp.API.Models.PlanDetail", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Entryby");

                    b.Property<DateTime?>("PlanDate")
                        .HasColumnType("date");

                    b.Property<string>("PlanSummary")
                        .HasMaxLength(1500);

                    b.Property<int?>("UpdateBy");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("PlanId");

                    b.ToTable("PlanDetail");
                });

            modelBuilder.Entity("EditorApp.API.Models.Preference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PreferenceType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status");

                    b.Property<int?>("UserId");

                    b.HasKey("PreferenceId");

                    b.ToTable("Preference");
                });

            modelBuilder.Entity("EditorApp.API.Models.ProposedNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ad")
                        .HasColumnName("ad")
                        .HasMaxLength(50);

                    b.Property<string>("Author")
                        .HasMaxLength(150);

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<string>("Edition")
                        .HasMaxLength(150);

                    b.Property<string>("EditionPage")
                        .HasColumnName("Edition_Page")
                        .HasMaxLength(250);

                    b.Property<string>("Entryby")
                        .HasMaxLength(50);

                    b.Property<int?>("Page");

                    b.Property<string>("Picture")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Pubdate")
                        .HasColumnType("date");

                    b.Property<string>("Subject")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ProposedNews");
                });

            modelBuilder.Entity("EditorApp.API.Models.RapeCase", b =>
                {
                    b.Property<int>("RapeCaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CaseDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CaseUpdateDate")
                        .HasColumnType("date");

                    b.Property<int?>("CaseUpdateStatus");

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(200);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DistrictId");

                    b.Property<DateTime?>("IncidentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IncidentDetail")
                        .HasMaxLength(500);

                    b.Property<int?>("IncidentPlace");

                    b.Property<string>("InfoSource")
                        .HasMaxLength(200);

                    b.Property<bool>("IsMainConvictFugitive");

                    b.Property<DateTime?>("MainConvictArrestDate")
                        .HasColumnType("date");

                    b.Property<string>("OtherIncidentPlace")
                        .HasMaxLength(500);

                    b.Property<int?>("TotalConvictedCount");

                    b.Property<int?>("UpazillaId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("RapeCaseId");

                    b.ToTable("RapeCase");
                });

            modelBuilder.Entity("EditorApp.API.Models.RapeCaseDetail", b =>
                {
                    b.Property<int>("RapeCaseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConvictAge")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ConvictIdentityOrRelationship")
                        .HasMaxLength(200);

                    b.Property<string>("ConvictName")
                        .HasMaxLength(200);

                    b.Property<string>("ConvictsOccupation")
                        .HasMaxLength(200);

                    b.Property<int>("RapeCaseId");

                    b.HasKey("RapeCaseDetailId");

                    b.ToTable("RapeCaseDetail");
                });

            modelBuilder.Entity("EditorApp.API.Models.RapeCaseDetailVictim", b =>
                {
                    b.Property<int>("RapeCaseVictimId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RapeCaseId");

                    b.Property<string>("VictimsAge")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VictimsCondition")
                        .HasMaxLength(50);

                    b.Property<string>("VictimsName")
                        .HasMaxLength(500);

                    b.Property<string>("VictimsOccupation")
                        .HasMaxLength(200);

                    b.HasKey("RapeCaseVictimId");

                    b.ToTable("RapeCaseDetailVictim");
                });

            modelBuilder.Entity("EditorApp.API.Models.RapeCaseStatus", b =>
                {
                    b.Property<int>("CaseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseStatus")
                        .HasMaxLength(200);

                    b.HasKey("CaseStatusId");

                    b.ToTable("RapeCaseStatus");
                });

            modelBuilder.Entity("EditorApp.API.Models.RapeIncidentPlace", b =>
                {
                    b.Property<int>("IncidentPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IncidentPlace")
                        .HasMaxLength(100);

                    b.HasKey("IncidentPlaceId");

                    b.ToTable("RapeIncidentPlace");
                });

            modelBuilder.Entity("EditorApp.API.Models.ReporterSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("Sorting");

                    b.HasKey("Id");

                    b.ToTable("ReporterSection");
                });

            modelBuilder.Entity("EditorApp.API.Models.ReporterSms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignmentId");

                    b.Property<string>("SmssendTime")
                        .HasColumnName("SMSSendTime")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ReporterSMS");
                });

            modelBuilder.Entity("EditorApp.API.Models.ReporterStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Keyword")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Media")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status");

                    b.Property<string>("StoryBody");

                    b.Property<string>("StoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StoryDate")
                        .HasColumnType("date");

                    b.Property<string>("StoryHeading");

                    b.Property<string>("StoryType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SubmitDesk")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ReporterStory");
                });

            modelBuilder.Entity("EditorApp.API.Models.ServicePermission", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UserId");

                    b.HasKey("ServiceId");

                    b.HasIndex("ServiceName", "UserId")
                        .IsUnique()
                        .HasName("uq_ServicePermission")
                        .HasFilter("[ServiceName] IS NOT NULL AND [UserId] IS NOT NULL");

                    b.ToTable("ServicePermission");
                });

            modelBuilder.Entity("EditorApp.API.Models.Smslog", b =>
                {
                    b.Property<int>("SmsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EntryTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("SmssendBy")
                        .HasColumnName("SMSSendBy");

                    b.Property<string>("Smstext")
                        .HasColumnName("SMSText")
                        .HasMaxLength(160)
                        .IsUnicode(false);

                    b.Property<int?>("Smsto")
                        .HasColumnName("SMSTo");

                    b.HasKey("SmsId");

                    b.ToTable("SMSLog");
                });

            modelBuilder.Entity("EditorApp.API.Models.Smsque", b =>
                {
                    b.Property<int>("SmsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmpId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MobileNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ProcessedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SmsBody")
                        .HasMaxLength(500);

                    b.Property<string>("SmsType")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Status");

                    b.HasKey("SmsId");

                    b.ToTable("SMSQue");
                });

            modelBuilder.Entity("EditorApp.API.Models.Story", b =>
                {
                    b.Property<int>("StoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApprovalCheck");

                    b.Property<string>("ApprovalStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("EntryBy");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Keyword")
                        .HasMaxLength(250);

                    b.Property<string>("LastHeading")
                        .HasMaxLength(500);

                    b.Property<string>("NewswrapCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PageCheck");

                    b.Property<int?>("PublishedWord");

                    b.Property<int?>("SaveMsword")
                        .HasColumnName("SaveMSWord");

                    b.Property<int?>("Status");

                    b.Property<string>("StoryBody");

                    b.Property<DateTime?>("StoryDate")
                        .HasColumnType("date");

                    b.Property<string>("StoryDesk")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StoryHeading")
                        .HasMaxLength(500);

                    b.Property<string>("StoryType")
                        .HasMaxLength(50);

                    b.Property<int?>("StoryVersion");

                    b.Property<int?>("StoryWord");

                    b.Property<string>("TransferStoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UploadTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("StoryId");

                    b.HasIndex("StoryDate")
                        .HasName("StoryDateIndex");

                    b.ToTable("Story");
                });

            modelBuilder.Entity("EditorApp.API.Models.StoryPage", b =>
                {
                    b.Property<decimal>("StoryPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EditionId");

                    b.Property<string>("Flown")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PageNo");

                    b.Property<int?>("StoryId");

                    b.HasKey("StoryPageId");

                    b.ToTable("StoryPage");
                });

            modelBuilder.Entity("EditorApp.API.Models.TblDeskinchargeReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("DeskIncharge")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Subordinates")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbl_Deskincharge_Report");
                });

            modelBuilder.Entity("EditorApp.API.Models.TblObject", b =>
                {
                    b.Property<int>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ObjectDes")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("ObjectName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("ObjectId");

                    b.ToTable("tbl_Object");
                });

            modelBuilder.Entity("EditorApp.API.Models.TblObjectRole", b =>
                {
                    b.Property<int>("RoleObjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ObjectId");

                    b.Property<int?>("RoleId");

                    b.HasKey("RoleObjectId")
                        .HasName("PK_tbl_RoleObject");

                    b.ToTable("tbl_ObjectRole");
                });

            modelBuilder.Entity("EditorApp.API.Models.TblRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RoleId");

                    b.ToTable("tbl_Role");
                });

            modelBuilder.Entity("EditorApp.API.Models.TblUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<int?>("ApprovePermission");

                    b.Property<int?>("AreaId");

                    b.Property<string>("BishalGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("DesignationId");

                    b.Property<int?>("DistrictNameId");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("EntryBy");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("GroupId");

                    b.Property<string>("Holiday")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("IsMohanogor");

                    b.Property<bool?>("IsPhotoHead");

                    b.Property<int?>("IsReporter");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MobileNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("NewswrapCenter");

                    b.Property<string>("NewswrapCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NewswrapDesk")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasMaxLength(100);

                    b.Property<string>("ReportGroup")
                        .HasMaxLength(100);

                    b.Property<int?>("ReportOrder");

                    b.Property<int?>("SectionId")
                        .HasColumnName("SectionID");

                    b.Property<int?>("UpazillaNameId");

                    b.Property<int?>("UpdateBy");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.HasIndex("NewswrapCode")
                        .IsUnique()
                        .HasName("NWCodeUni")
                        .HasFilter("[NewswrapCode] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UserUnique");

                    b.ToTable("tbl_User");
                });

            modelBuilder.Entity("EditorApp.API.Models.TblUserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RoleId");

                    b.Property<int?>("UserId");

                    b.HasKey("UserRoleId");

                    b.ToTable("tbl_UserRole");
                });

            modelBuilder.Entity("EditorApp.API.Models.Upazila", b =>
                {
                    b.Property<int>("UpazilaNameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UpazilaName")
                        .HasMaxLength(150);

                    b.HasKey("UpazilaNameId");

                    b.ToTable("Upazila");
                });

            modelBuilder.Entity("EditorApp.API.Models.UserGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("GroupId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("EditorApp.API.Models.VideoSummary", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CenterCode");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId");

                    b.Property<DateTime?>("VideoDate")
                        .HasColumnType("date");

                    b.Property<string>("VideoName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("VideoPath")
                        .HasMaxLength(550)
                        .IsUnicode(false);

                    b.Property<string>("VideoSize")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("VideoDate", "UserId", "VideoName")
                        .IsUnique()
                        .HasName("IX_VideoSummary")
                        .HasFilter("[VideoDate] IS NOT NULL AND [UserId] IS NOT NULL AND [VideoName] IS NOT NULL");

                    b.ToTable("VideoSummary");
                });
#pragma warning restore 612, 618
        }
    }
}
